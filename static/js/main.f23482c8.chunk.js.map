{"version":3,"sources":["images/dark-loader.gif","images/logoForLight.png","images/logoForDark.png","pages/Poll.jsx","App.js","reportWebVitals.js","index.js"],"names":["Poll","pollId","useParams","useState","firstLodad","logo","setLogo","headerClasses","setHeaderClasses","logoClasses","setLogoClasses","pollIdInput","setPollIdInput","theme","setTheme","input","undefined","length","style","onChange","event","target","value","toLowerCase","placeholder","className","to","window","matchMedia","matches","logoForDark","logoForLight","addEventListener","setTimeout","updater","update","scrollToTop","setScrollToTop","scrollTo","state","setState","alreadyAnswered","setAlreadyAnswered","localStorage","getItem","currentQuestionIndex","setCurrentQuestionIndex","currentQuestionType","setCurrentQuestionType","currentQuestion","setCurrentQuestion","currentOptions","setCurrentOptions","optionClasses","setOptionClasses","optionsContainerClasses","setOptionsContainerClasses","questionClasses","setQuestionClasses","answers","setAnswers","poll","setPoll","goToNextQuestion","passedFilter","questions","setItem","dataToPost","userId","method","axios","url","data","title","defaultLang","options","type","tempClasses","i","push","answerIndex","filter","isFilter","correctIndexes","indexOf","tempAnswers","then","response","questionType","results","setResults","src","alt","Loading","labels","titles","j","name","map","questionResult","datasets","label","backgroundColor","borderColor","borderWidth","maxBarThickness","maintainAspectRatio","scales","xAxes","ticks","beginAtZero","height","finalState","color","option","onClick","img","width","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f23482c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dark-loader.824c3104.gif\";","export default __webpack_public_path__ + \"static/media/logoForLight.437059c6.png\";","export default __webpack_public_path__ + \"static/media/logoForDark.47b59b98.png\";","import React, { useState } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { MdRadioButtonUnchecked, MdCheckCircle } from \"react-icons/md\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\nimport Loading from \"../images/dark-loader.gif\";\r\nimport logoForLight from \"../images/logoForLight.png\";\r\nimport logoForDark from \"../images/logoForDark.png\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\n\r\nconst Poll = () => {\r\n  // localStorage.setItem(\"pol1\", \"true\");\r\n\r\n  // Header\r\n  let { pollId } = useParams();\r\n  const [firstLodad, setfirstLoad] = useState(true);\r\n  const [logo, setLogo] = useState(\"No data\");\r\n  const [headerClasses, setHeaderClasses] = useState(\"logo-container start-screen\");\r\n  const [logoClasses, setLogoClasses] = useState(\"logo\");\r\n  const [pollIdInput, setPollIdInput] = useState(\"\");\r\n  // Detect theme\r\n  const [theme, setTheme] = useState(\"No data\");\r\n  if (theme == \"No data\") {\r\n    if (window.matchMedia && \r\n      window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      setTheme(\"dark\");\r\n      setLogo(logoForDark);\r\n    } else {\r\n      setTheme(\"light\");\r\n      setLogo(logoForLight);\r\n    }\r\n    window.matchMedia('(prefers-color-scheme: dark)')\r\n    .addEventListener('change', event => {\r\n      if (event.matches) {\r\n        setTheme(\"dark\");\r\n        setLogo(logoForDark);\r\n      } else {\r\n        setTheme(\"light\");\r\n        setLogo(logoForLight);\r\n      }\r\n      })\r\n  }\r\n  if (pollId == undefined || pollId.length == 0) {\r\n    \r\n  } else {\r\n    if (firstLodad) {\r\n      setTimeout(()=>{\r\n        setHeaderClasses(`logo-container header`);\r\n        setLogoClasses(\"logo header-logo\")\r\n      },1000);\r\n    }\r\n  }\r\n\r\n  function input() {\r\n    if(pollId == undefined || pollId.length == 0) {\r\n      return(\r\n        <div style={{  \r\n          \"display\": \"flex\",\r\n          \"flex-direction\": \"column\",\r\n        }}>\r\n          <input onChange={(event) => {\r\n            setPollIdInput(event.target.value.toLowerCase());\r\n          }} \r\n          placeholder=\"Ingresa el ID\"\r\n          className=\"pollId-input\"\r\n          />\r\n          <Link to={`/${pollIdInput}`} className=\"pollId-btn\">\r\n            <h1 className=\"pollId-btn-txt\">\r\n              Contestar\r\n            </h1>\r\n          </Link>\r\n        </div>\r\n      );\r\n    } \r\n    else {\r\n      return(<></>);\r\n    }\r\n  }\r\n  // Header\r\n\r\n\r\n  const [updater, update] = useState(false);\r\n  // Allways scroll to top\r\n  const [scrollToTop, setScrollToTop] = useState(false);\r\n  if (!scrollToTop) {\r\n    window.scrollTo(0, 0);\r\n    setScrollToTop(true);\r\n  }\r\n\r\n  const [state, setState] = useState(\"initial\");\r\n  // initial => answering => loadingResults => final\r\n\r\n  // Know if someone already answered a poll\r\n  const [alreadyAnswered, setAlreadyAnswered] = useState(\"No data\");\r\n  if (alreadyAnswered == \"No data\" && pollId!= undefined) { \r\n    setAlreadyAnswered(localStorage.getItem(pollId));\r\n  };\r\n  if (alreadyAnswered == \"true\") {\r\n    setState(\"loadingResults\");\r\n    update(true);\r\n    setAlreadyAnswered(true);\r\n  }\r\n\r\n  // Question states\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [currentQuestionType, setCurrentQuestionType] = useState(\"multiTextOption\");\r\n  const [currentQuestion, setCurrentQuestion] = useState(\"Loading...\");\r\n  const [currentOptions, setCurrentOptions] = useState([]);\r\n  const [optionClasses, setOptionClasses] = useState([])\r\n  const [optionsContainerClasses, setOptionsContainerClasses] = useState(\"poll-options-container\")\r\n  const [questionClasses, setQuestionClasses] = useState(\"poll-question\")\r\n  const [answers, setAnswers] = useState([]);\r\n  if (updater) {\r\n    update(false);\r\n  }\r\n  const [poll, setPoll] = useState(\"No data\");\r\n  if (poll == \"No data\" && pollId!= undefined) {\r\n    axios({\r\n      method: \"post\",\r\n      url:\r\n        \"https://us-central1-poleoo.cloudfunctions.net/randomNumber\",\r\n      data: {\r\n        method : \"queryPollByPollId\",\r\n        pollId : pollId\r\n      },\r\n    }).then((response) => {\r\n      setPoll(response.data);\r\n      if (localStorage.getItem(pollId) != \"true\") {\r\n        setState(\"answering\");\r\n      }\r\n      setCurrentQuestion(response.data.questions[currentQuestionIndex].title[response.data.defaultLang]);\r\n      setCurrentOptions(response.data.questions[currentQuestionIndex].options);\r\n      setCurrentQuestionType(response.data.questions[currentQuestionIndex].type);      \r\n      let tempClasses = [];\r\n      for (let i = 0; i < response.data.questions[currentQuestionIndex].options.length; i++) {\r\n        tempClasses.push(`${response.data.questions[currentQuestionIndex].type}-container`);\r\n      }\r\n      setOptionClasses(tempClasses);\r\n    });\r\n  }\r\n  function goToNextQuestion(passedFilter) {\r\n    setTimeout(() => {\r\n      setOptionsContainerClasses(\"poll-options-container dissapear-left\");\r\n      setQuestionClasses(\"poll-question dissapear-left\");\r\n      if (currentQuestionIndex + 1 == poll.questions.length && passedFilter) {\r\n        setState(\"loadingResults\");\r\n        localStorage.setItem(pollId, \"true\");\r\n        // Post results\r\n        let dataToPost = {\r\n          userId : \"anonim\",\r\n          method : \"submitAnswers\",\r\n          pollId : pollId,\r\n          answers : answers,\r\n        };\r\n        axios({\r\n          method: \"post\",\r\n          url:\r\n            \"https://us-central1-poleoo.cloudfunctions.net/randomNumber\",\r\n          data: dataToPost,\r\n        });\r\n        localStorage.setItem(pollId, \"true\");\r\n      } else {\r\n      }\r\n      if (passedFilter && currentQuestionIndex + 1 < poll.questions.length){\r\n        setTimeout(()=> {\r\n          setCurrentQuestion(poll.questions[currentQuestionIndex + 1].title[poll.defaultLang]);\r\n          setCurrentOptions(poll.questions[currentQuestionIndex + 1].options);\r\n          setCurrentQuestionType(poll.questions[currentQuestionIndex + 1].type);\r\n          let tempClasses = [];\r\n          for (let i = 0; i < poll.questions[currentQuestionIndex + 1].options.length; i++) {\r\n            tempClasses.push(`${poll.questions[currentQuestionIndex + 1].type}-container`);\r\n          }\r\n          setOptionClasses(tempClasses);\r\n          setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n          setQuestionClasses(\"poll-question hide dissapear-right\");\r\n          setOptionsContainerClasses(\"poll-options-container hide dissapear-right\");\r\n          setTimeout(()=> {\r\n            setQuestionClasses(\"poll-question\");\r\n            setOptionsContainerClasses(\"poll-options-container\");\r\n            update(true);\r\n          }, 200);  \r\n        }, 200);\r\n      }\r\n    }, 500)\r\n  }\r\n  function passedFilter(answerIndex) {\r\n    if(poll.questions[currentQuestionIndex].filter.isFilter) { // Is filter\r\n      if(poll.questions[currentQuestionIndex].filter.correctIndexes.indexOf(answerIndex) < 0) { // if it's incorrect\r\n        localStorage.setItem(pollId, \"true\");\r\n        setAlreadyAnswered(\"true\");\r\n        setState(\"loadingResults\");\r\n        return false;\r\n      } else { // Is correct\r\n        return true;\r\n      }\r\n    } else { // Is not a filter\r\n      let tempAnswers = answers;\r\n      tempAnswers.push(answerIndex);\r\n      setAnswers(tempAnswers);\r\n      return true;\r\n    }\r\n  }\r\n  function options(questionType) {\r\n    if (questionType == \"multiTextOption\") {\r\n      return(\r\n        currentOptions.map((option) => (\r\n          <div className={optionClasses[currentOptions.indexOf(option)]} onClick={() => {\r\n            let tempClasses = optionClasses;\r\n            tempClasses[currentOptions.indexOf(option)] = \"multiTextOption-container multiTextOption-container-selected\"\r\n            setOptionClasses(tempClasses);\r\n            update(true);\r\n            goToNextQuestion(passedFilter(currentOptions.indexOf(option)));\r\n          }}>\r\n            <MdRadioButtonUnchecked className=\"unchecked-icon\"/>\r\n            <p className=\"option-text\">{option[poll.defaultLang]}</p>\r\n          </div>\r\n        ))\r\n      );\r\n    } else if (questionType == \"multiImgOption\") {\r\n      return(\r\n        currentOptions.map((option) => (\r\n          <div className={optionClasses[currentOptions.indexOf(option)]} onClick={() => {\r\n            let tempClasses = optionClasses;\r\n            tempClasses[currentOptions.indexOf(option)] = \"multiImgOption-container multiTextOption-container-selected\"\r\n            setOptionClasses(tempClasses);\r\n            update(true);\r\n            goToNextQuestion(passedFilter(currentOptions.indexOf(option)));\r\n          }}>\r\n            <img className=\"option-img\" alt=\"img\" src={option.img}/>\r\n            <p className=\"option-text\">{(option.name == undefined) ? \"\" : option.name[poll.defaultLang] }</p>\r\n          </div>\r\n        ))\r\n      );\r\n    }\r\n  }\r\n\r\n  // Query the results\r\n  const [results, setResults] = useState(\"No data\");\r\n  if(state == \"loadingResults\") {\r\n    if (pollId != undefined) {\r\n      setState(\"final\");\r\n      axios({\r\n        method: \"post\",\r\n        url:\r\n          \"https://us-central1-poleoo.cloudfunctions.net/randomNumber\",\r\n        data: {\r\n          method : \"queryResultsByPollId\",\r\n          pollId : pollId,\r\n        },\r\n      }).then((response) => {\r\n        setResults(response.data);\r\n        update(true);\r\n      });\r\n    }\r\n  }\r\n\r\n  // Display results\r\n  function finalState () {\r\n    if (results == \"No data\") {\r\n      return(\r\n        <img className=\"loading-gif\" alt=\"Loading...\" src={Loading}/>\r\n      );\r\n    } else if (results == \"Poll results are private\"){\r\n      return(\r\n        <>\r\n          <h3>{poll.defaultLang == \"es\" ? \"Gracias por contestar!\" : \"Thank you for answering!\"}</h3>\r\n          <MdCheckCircle className=\"check-mark\"/>\r\n        </>\r\n      );\r\n    } else if(poll != \"No data\"){\r\n      let labels = [];\r\n      let titles = [];\r\n      for (let i = 0; i < poll.questions.length; i++) {\r\n        if (!poll.questions[i].filter.isFilter) {\r\n          labels.push([]);\r\n          titles.push(poll.questions[i].title[poll.defaultLang]);\r\n          for (let j = 0; j < poll.questions[i].options.length; j++) {\r\n            if(poll.questions[i].type == \"multiTextOption\") {\r\n              labels[i].push(poll.questions[i].options[j][poll.defaultLang]);\r\n            } else {\r\n              labels[i].push(poll.questions[i].options[j].name[poll.defaultLang]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return(\r\n        <div className=\"results-container\">\r\n          {\r\n            results.map((questionResult) => (\r\n              <div className=\"chart-container\">\r\n                <h2 className=\"results-question\">{titles[results.indexOf(questionResult)]}</h2>\r\n                <HorizontalBar data={{\r\n                  labels : labels[results.indexOf(questionResult)],\r\n                  datasets: [\r\n                    {\r\n                      label : \"Votos\",\r\n                      data: questionResult,\r\n                      backgroundColor : \"rgba(18, 229, 122, 0.3)\",\r\n                      borderColor : \"rgb(18, 229, 122)\",\r\n                      borderWidth: 3,\r\n                      maxBarThickness: 30,\r\n                    }\r\n                  ],\r\n                }}\r\n                options={{\r\n                  maintainAspectRatio : true,\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        ticks: {\r\n                          beginAtZero: true\r\n                        }\r\n                      }\r\n                    ]\r\n                  }\r\n                }}\r\n                height={120}\r\n                className=\"results-chart\"\r\n                />\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Renders\r\n  if (state == \"loadingResults\" || state == \"final\") {\r\n    return (\r\n      <>\r\n      <div className={headerClasses}>\r\n        <Fade>\r\n          <img src={logo} alt=\"Poleo\" className={logoClasses}/>\r\n          {\r\n            input()\r\n          }\r\n        </Fade>\r\n      </div>\r\n      <div className=\"content-container\">\r\n        <div className=\"poll-container\">\r\n          <h1 className=\"\">{poll == \"No data\" ? \"Loading results...\" : poll.title[poll.defaultLang]}</h1>\r\n          {finalState()}\r\n        </div>\r\n        <p style={{color: \"rgba(255,255,255,1)\"}}>{updater}</p>\r\n      </div>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n      <div className={headerClasses}>\r\n        <Fade>\r\n          <img src={logo} alt=\"Poleo\" className={logoClasses}/>\r\n          {\r\n            input()\r\n          }\r\n        </Fade>\r\n      </div>\r\n      <div className=\"content-container\">\r\n        <div className=\"poll-container\">\r\n          <h1 className={questionClasses}>{currentQuestion}</h1>\r\n          <div className={optionsContainerClasses} style={{\"display\": currentQuestionType == \"multiImgOption\" ? \"flex\" : \"block\"}}>\r\n            {\r\n              options(currentQuestionType)\r\n            }\r\n          </div>\r\n          <div className=\"progress-bar-content-container\">\r\n            <div className=\"progress-bar-container\">\r\n              <div className=\"progress-bar\" style={{width: (poll == \"No data\" ? \"0%\" : `${((currentQuestionIndex + 1) / (poll.questions.length)) * 100}%`)}}/>\r\n            </div>\r\n            <p>{`${currentQuestionIndex + 1} de ${poll == \"No data\" ? 0 : poll.questions.length}`}</p>\r\n          </div>\r\n        </div>\r\n        <p style={{color: \"rgba(255,255,255,1)\"}}>{updater}</p>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Poll;\r\n\r\n// TODO: \r\n// Add input to enter the pollId\r\n// Navigate to the correct url\r\n// Check if the pollId exists\r\n// // Verify if the question is a filter\r\n// //   if it is, then check if the answer was correct\r\n// //      if it was, then continue\r\n// //      if not, save the in the browser the fact that you already answered it \r\n// // Post the results on firebase\r\n// // Prevent the poll from breaking when questions are over\r\n// // Query the results\r\n// // Display the results\r\n","import React, { useState } from \"react\";\nimport './App.css';\nimport { Route, BrowserRouter as Router, Switch, useParams } from \"react-router-dom\";\n// import { useParams } from \"react-router-dom\";\nimport Poll from \"./pages/Poll\";\n// import logoForLight from \"./images/logoForLight.png\";\n// import logoForDark from \"./images/logoForDark.png\";\n// import { Fade } from \"react-awesome-reveal\";\n\nfunction App() {\n  // const [theme, setTheme] = useState(\"No data\");\n  // const [firstLodad, setfirstLoad] = useState(true);\n  // const [logo, setLogo] = useState(\"No data\");\n  // const [headerClasses, setHeaderClasses] = useState(\"logo-container start-screen\");\n  // const [logoClasses, setLogoClasses] = useState(\"logo\");\n  // // let { pollId } = useParams();\n  // // console.log(pollId);\n  // if (theme == \"No data\") {\n  //   if (window.matchMedia &&\n  //     window.matchMedia('(prefers-color-scheme: dark)').matches) {\n  //     setTheme(\"dark\");\n  //     setLogo(logoForDark);\n  //   } else {\n  //     setTheme(\"light\");\n  //     setLogo(logoForLight);\n  //   }\n  //   window.matchMedia('(prefers-color-scheme: dark)')\n  //   .addEventListener('change', event => {\n  //     if (event.matches) {\n  //       setTheme(\"dark\");\n  //       setLogo(logoForDark);\n  //     } else {\n  //       setTheme(\"light\");\n  //       setLogo(logoForLight);\n  //     }\n  //     })\n  // }\n  // if (firstLodad) {\n  //   setTimeout(()=>{\n  //     setHeaderClasses(`logo-container header`);\n  //     setLogoClasses(\"logo header-logo\")\n  //   },1000);\n  // }\n\n  return (\n    <Router>\n      {/* <div className={headerClasses}>\n        <Fade>\n          <img src={logo} alt=\"Poleo\" className={logoClasses}/>\n        </Fade>\n      </div> */}\n      <Switch>\n        {/* <Route path=\"/Poleo-sharable-link/:pollId\" component={Poll} />\n        <Route path=\"/Poleo-sharable-link/\" component={Poll} /> */}\n        <Route path=\"/:pollId\" component={Poll} />\n        <Route path=\"/\" component={Poll} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}