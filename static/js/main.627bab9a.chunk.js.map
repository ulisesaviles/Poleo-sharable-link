{"version":3,"sources":["pages/Poll.jsx","images/logoForLight.png","images/logoForDark.png","App.js","reportWebVitals.js","index.js"],"names":["Poll","useState","scrollToTop","setScrollToTop","window","scrollTo","theme","setTheme","matchMedia","matches","addEventListener","event","setState","alreadyAnswered","setAlreadyAnswered","localStorage","getItem","console","log","pollId","useParams","poll","setPoll","axios","method","url","data","then","response","className","title","defaultLang","App","firstLodad","logo","setLogo","headerClasses","setHeaderClasses","logoClasses","setLogoClasses","logoForDark","logoForLight","setTimeout","src","alt","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA+DeA,EA3DF,WAAO,IAAD,EACqBC,oBAAS,GAD9B,mBACVC,EADU,KACGC,EADH,KAEZD,IACHE,OAAOC,SAAS,EAAG,GACnBF,GAAe,IAJA,MAOSF,mBAAS,WAPlB,mBAOVK,EAPU,KAOHC,EAPG,KAQJ,WAATD,IACEF,OAAOI,YACTJ,OAAOI,WAAW,gCAAgCC,QAClDF,EAAS,QAETA,EAAS,SAEXH,OAAOI,WAAW,gCACfE,iBAAiB,UAAU,SAAAC,GACtBA,EAAMF,QACRF,EAAS,QAETA,EAAS,aApBA,MAyBSN,mBAAS,WAzBlB,mBAyBHW,GAzBG,aA4B6BX,mBAAS,WA5BtC,mBA4BVY,EA5BU,KA4BOC,EA5BP,KA6BM,WAAnBD,GACFC,EAAmBC,aAAaC,QAAQ,aAE1CC,QAAQC,IAAwC,MAApCH,aAAaC,QAAQ,aAhChB,IAkCXG,EAAWC,cAAXD,OAlCW,EAmCOlB,mBAAS,WAnChB,mBAmCVoB,EAnCU,KAmCJC,EAnCI,KAkDjB,MAdY,WAARD,GACFE,IAAM,CACJC,OAAQ,OACRC,IACE,6DACFC,KAAM,CACJF,OAAS,oBACTL,OAASA,KAEVQ,MAAK,SAACC,GACPN,EAAQM,EAASF,MACjBd,EAAS,gBAIX,qBAAKiB,UAAU,oBAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,oBAAIA,UAAU,gBAAd,SAAuC,WAARR,EAAoB,aAAeA,EAAKS,MAAMT,EAAKU,oBCzD3E,MAA0B,yCCA1B,MAA0B,wC,QCuD1BC,MA/Cf,WAAgB,IAAD,EACa/B,mBAAS,WADtB,mBACNK,EADM,KACCC,EADD,OAEsBN,oBAAS,GAF/B,mBAENgC,EAFM,aAGWhC,mBAAS,YAHpB,mBAGNiC,EAHM,KAGAC,EAHA,OAI6BlC,mBAAS,+BAJtC,mBAINmC,EAJM,KAISC,EAJT,OAKyBpC,mBAAS,QALlC,mBAKNqC,EALM,KAKOC,EALP,KAiCb,MA3Ba,WAATjC,IACEF,OAAOI,YACTJ,OAAOI,WAAW,gCAAgCC,SAClDF,EAAS,QACT4B,EAAQK,KAERjC,EAAS,SACT4B,EAAQM,IAEVrC,OAAOI,WAAW,gCACjBE,iBAAiB,UAAU,SAAAC,GACtBA,EAAMF,SACRF,EAAS,QACT4B,EAAQK,KAERjC,EAAS,SACT4B,EAAQM,QAIVR,GACFS,YAAW,WACTL,EAAiB,yBACjBE,EAAe,sBACf,KAIF,eAAC,IAAD,WACE,qBAAKV,UAAWO,EAAhB,SACE,cAAC,IAAD,UACE,qBAAKO,IAAKT,EAAMU,IAAI,QAAQf,UAAWS,QAG3C,cAAC,IAAD,UACE,cAAC,IAAD,CAAOO,KAAK,+BAA+BC,UAAW9C,UCrC/C+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.627bab9a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Poll = () => {\r\n  const [scrollToTop, setScrollToTop] = useState(false);\r\n  if (!scrollToTop) {\r\n    window.scrollTo(0, 0);\r\n    setScrollToTop(true);\r\n  }\r\n\r\n  const [theme, setTheme] = useState(\"No data\");\r\n  if (theme == \"No data\") {\r\n    if (window.matchMedia && \r\n      window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      setTheme(\"dark\");\r\n    } else {\r\n      setTheme(\"light\");\r\n    }\r\n    window.matchMedia('(prefers-color-scheme: dark)')\r\n      .addEventListener('change', event => {\r\n        if (event.matches) {\r\n          setTheme(\"dark\");\r\n        } else {\r\n          setTheme(\"light\");\r\n        }\r\n      })\r\n  }\r\n\r\n  const [state, setState] = useState(\"initial\");\r\n  // initial => answering => loading => answered\r\n\r\n  const [alreadyAnswered, setAlreadyAnswered] = useState(\"No data\");\r\n  if (alreadyAnswered == \"No data\") { \r\n    setAlreadyAnswered(localStorage.getItem(\"answered\"));\r\n  }\r\n  console.log(localStorage.getItem(\"answered\") == null);\r\n\r\n  let { pollId } = useParams();\r\n  const [poll, setPoll] = useState(\"No data\");\r\n  if (poll == \"No data\") {\r\n    axios({\r\n      method: \"post\",\r\n      url:\r\n        \"https://us-central1-poleoo.cloudfunctions.net/randomNumber\",\r\n      data: {\r\n        method : \"queryPollByPollId\",\r\n        pollId : pollId\r\n      },\r\n    }).then((response) => {\r\n      setPoll(response.data);\r\n      setState(\"answering\");\r\n    });\r\n  }\r\n  return (\r\n    <div className=\"content-container\">\r\n      <div className=\"poll-container\">\r\n        <h1 className=\"poll-question\">{poll == \"No data\" ? \"Loading...\" : poll.title[poll.defaultLang]}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Poll;","export default __webpack_public_path__ + \"static/media/logoForLight.437059c6.png\";","export default __webpack_public_path__ + \"static/media/logoForDark.47b59b98.png\";","import React, { useState } from \"react\";\nimport './App.css';\nimport { Route, BrowserRouter as Router, Switch, useParams } from \"react-router-dom\";\nimport Poll from \"./pages/Poll\";\nimport logoForLight from \"./images/logoForLight.png\";\nimport logoForDark from \"./images/logoForDark.png\";\nimport { Fade } from \"react-awesome-reveal\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"No data\");\n  const [firstLodad, setfirstLoad] = useState(true);\n  const [logo, setLogo] = useState(\"No data\");\n  const [headerClasses, setHeaderClasses] = useState(\"logo-container start-screen\");\n  const [logoClasses, setLogoClasses] = useState(\"logo\");\n  if (theme == \"No data\") {\n    if (window.matchMedia && \n      window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      setTheme(\"dark\");\n      setLogo(logoForDark);\n    } else {\n      setTheme(\"light\");\n      setLogo(logoForLight);\n    }\n    window.matchMedia('(prefers-color-scheme: dark)')\n    .addEventListener('change', event => {\n      if (event.matches) {\n        setTheme(\"dark\");\n        setLogo(logoForDark);\n      } else {\n        setTheme(\"light\");\n        setLogo(logoForLight);\n      }\n      })\n  }\n  if (firstLodad) {\n    setTimeout(()=>{\n      setHeaderClasses(`logo-container header`);\n      setLogoClasses(\"logo header-logo\")\n    },1000);\n  }\n\n  return (\n    <Router>\n      <div className={headerClasses}>\n        <Fade>\n          <img src={logo} alt=\"Poleo\" className={logoClasses}/>\n        </Fade>\n      </div>\n      <Switch>\n        <Route path=\"/Poleo-sharable-link/:pollId\" component={Poll} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}